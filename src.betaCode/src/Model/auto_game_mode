
    private void auto_game_mode(){
        boolean hasPlayed = false;
        while (true){
            var player = players[turnManager.getPlayer()];
            var lastCard = turnManager.getCard();
            System.out.println("Deck: " + deckManager.size() + " Discards: " + discards.size());
            System.out.println("Player: " + player.getName());
            System.out.println("lastCard: " + lastCard);

            System.out.println("Hand: " + player.getHand());
            var playable = player.getPlayableCards(lastCard);
            System.out.println("Playable: " + playable);
            if (playable.size() == 0){
                var drawed = deckManager.draw();
                System.out.println("Drawed: " + drawed);
                if (drawed.isPlayable(lastCard))
                {
                    discards.push(drawed);
                    System.out.println("Played: " + drawed);
                    hasPlayed = true;
                }
                else{
                    player.drawCard(drawed);
                    System.out.println("New Hand: " + player.getHand());
                }
            }
            else{
                var played = playable.get(0);
                player.playCard(played);
                discards.push(played);
                System.out.println("Played: " + played);
                hasPlayed = true;
            }

            if (player.getHand().size() == 0) break;

            if (hasPlayed) {
                turnManager.getCard() = discards.peek();
                //if (TurnManager.card instanceof WildAction){

                if (turnManager.getCard().getColor() == CardColor.WILD){
                    ((WildAction) turnManager.getCard()).changeColor(TurnManager.card.getValue());
                }
                if(TurnManager.card instanceof ActionCard){
                    ((ActionCard) TurnManager.card).action();
                }
                if(TurnManager.card instanceof SkipAction){
                    System.out.println("Skipped: " + players[TurnManager.player].getName());
                    ((SkipAction) TurnManager.card).skipturn();
                }

                switch (TurnManager.card.getValue()) {
                    /*case SKIP -> {
                        System.out.println("Skipped: " + players[TurnManager.player].getName());
                        TurnManager.skipTurn();
                    }*/
                    case DRAW -> {
                        var drawed = deckManager.draw(2);
                        System.out.println("Next player " + players[TurnManager.player].getName() + " drawed 2: " + drawed);
                        System.out.println("Skipped");
                        players[TurnManager.player].drawCards(drawed);
                        TurnManager.skipTurn();
                    }
                    case REVERSE -> {
                        reverse();
                        System.out.println("Reversed direction");
                    }
                    //TurnManager.skipTurn();
                    /*case WILD -> {
                        Random r = new Random();
                        var randomColor = CardColor.values()[r.nextInt(4)];
                        System.out.println("New color: " + randomColor);
                        TurnManager.card = new Card(randomColor, CardValue.WILD);
                    }*/
                    case WILD_DRAW -> {
                        /*Random r = new Random();
                        var randomColor = CardColor.values()[r.nextInt(4)];
                        System.out.println("New color: " + randomColor);
                        TurnManager.card = new Card(randomColor, CardValue.WILD_DRAW);*/
                        var drawed = deckManager.draw(4);
                        System.out.println("Next player " + players[TurnManager.player].getName() + " drawed 4: " + drawed);
                        System.out.println("Skipped");
                        players[TurnManager.player].drawCards(drawed);
                        TurnManager.skipTurn();
                    }
                }
                hasPlayed = false;
            }

            TurnManager.skipTurn();

            if (deckManager.size() == 0){
                System.out.println("Deck re-shuffle");
                deckManager.re_shuffle(discards);
            }

            System.out.println("");
            System.out.println("");
        }
        System.out.println("Winner was:" + players[TurnManager.player].getName());
    }
